using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;

namespace Litdex.Security.RNG.TRNG
{
	/// <summary>
	///		Australian National University Quantum Random Number Generator. 
	/// <para>
	///		All number generated by measuring the quantum fluctuations of the vacuum.
	/// </para>
	/// <para>
	///		website: https://qrng.anu.edu.au/
	/// </para>
	/// </summary>
	public class ANU : TrueRandom
	{
		#region Constructor & Destructor

		/// <summary>
		/// TRNG from https://qrng.anu.edu.au/
		/// </summary>
		/// <param name="entropySize">Entropy size for RNG.</param>
		private ANU(ushort entropySize = 4096)
		{
			this._Entropy = new List<byte>(entropySize);
		}

		/// <summary>
		/// TRNG from https://qrng.anu.edu.au/
		/// </summary>
		/// <param name="client">
		/// Client for sending and receive http response.
		/// </param>
		public ANU(HttpClient client = null) : this(4096)
		{
			if (client == null)
			{
				this._IsSupplied = false;
				this._HttpClient = new HttpClient();
				this.AddHttpUserAgent();
			}
			else
			{
				this._IsSupplied = true;
				this._HttpClient = client;
			}
		}

		~ANU()
		{
			if (this._IsSupplied == false)
			{
				this._HttpClient.Dispose();
			}
			this._Entropy.Clear();
		}

		#endregion Constructor & Destructor

		#region Protected Method

		/// <summary>
		/// Download data from server.
		/// </summary>
		/// <param name="length">How many block to retrieve.</param>
		/// <param name="blockSize">Block size of the hex string.</param>
		protected void Next(ushort length = 1, ushort blockSize = 1024)
		{
			if (length <= 0)
			{
				length = 1;
			}
			else if (length > 1024)
			{
				length = 1024;
			}

			if (blockSize <= 0)
			{
				blockSize = 1024;
			}
			else if (blockSize > 1024)
			{
				blockSize = 1024;
			}

			var url = $"https://qrng.anu.edu.au/API/jsonI.php?length={ length }&type=hex16&size={ blockSize }";

			using (var doc = this.GetJsonResponseAsync<JsonDocument>(url).GetAwaiter().GetResult())
			{
				foreach (var data in doc.RootElement.GetProperty("data").EnumerateArray())
				{
					this._Entropy.AddRange(DecodeBase16(data.GetString()));
				}
			}
		}

		#endregion Protected Method

		#region Public Method

		/// <inheritdoc/>
		public override string AlgorithmName()
		{
			return "ANU True Random Generator";
		}

		/// <inheritdoc/>
		public override void Reseed()
		{
			this._Entropy.Clear();
#if RELEASE
			this.Next(length: 1, blockSize: 128);
#else
			this.Next(length: 4);
#endif
		}

		#endregion Public Method
	}
}
